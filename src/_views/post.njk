{% extends "base.njk" %}

{% block content %}
<div class="single {% if updatedAt and (updatedAt | isRecent) %}page--recently-updated{% endif %}">
    {% block single_content %}
    <h1 class="{{ 'page-title' if fancyTitle else ''}}">{{ title }}</h1>

    {% if updatedAt %}
    <div class="page__updated-at" title='{{updatedAt | dateIso}} ({{updatedAt | dateAgo}})'>
        <b>Last updated:</b>
        <time datetime='{{updatedAt | dateIso}}'>
            {{updatedAt | date}}</time>
    </div>
    {% endif %}

    {{ content | safe }}
    {% endblock %}
</div>
{% endblock %}

{% block foot %}
<script>
    renderAnchors();
    initOverflowExpansions();
    initImageExpansions();

    function renderAnchors() {
        document.querySelectorAll(':is(h2,h3,h4,h5)[id]')
            .forEach(h => {
                h.setAttribute('tabindex', 0);
                h.setAttribute('title', `Permalink for "${h.textContent}"`);
                const a = document.createElement('a');
                a.classList.add('anchor');
                a.href = `#${h.id}`;
                h.appendChild(a);
            });
    }

    function initImageExpansions() {
        document.querySelector('.single')?.addEventListener('click', e => {
            if (e.target?.tagName?.toUpperCase() === 'IMG') {
                e.target.classList.toggle('zoom');
            }
        })
    }

    function initOverflowExpansions() {
        window.addEventListener('mouseover', ev => {
            if (ev.target?.matches('.snippet, .table')) {
                requestAnimationFrame(() => setOverflow(ev.target));
            }
        });

        function setOverflow(el) {
            const hasOverflow = el.scrollWidth >= el.clientWidth + 16;
            if (hasOverflow) {
                el.classList.add('has-overflow');
                const maxWidth = Math.min(el.scrollWidth, window.innerWidth);
                el.style.setProperty('--scrollWidth', `${maxWidth}px`);
            }
        }
    }
</script>
{% endblock %}